version: 2.1

orbs:
  docker: circleci/docker@2.2.0

# Parameters for conditional workflows
parameters:
  run-backend:
    type: boolean
    default: false
  run-frontend:
    type: boolean
    default: false
  run-k8s:
    type: boolean
    default: false
  run-all:
    type: boolean
    default: true

workflows:
  # Setup workflow - detects changes and triggers appropriate workflows
  setup:
    when:
      and:
        - << pipeline.parameters.run-all >>
        - not:
            or:
              - << pipeline.parameters.run-backend >>
              - << pipeline.parameters.run-frontend >>
              - << pipeline.parameters.run-k8s >>
    jobs:
      - detect-and-trigger

  # Backend-only workflow
  backend-workflow:
    when: << pipeline.parameters.run-backend >>
    jobs:
      - backend-build-and-test
      - build-and-push-backend:
          requires:
            - backend-build-and-test
          filters:
            branches:
              only:
                - main
                - master

  # Frontend-only workflow
  frontend-workflow:
    when: << pipeline.parameters.run-frontend >>
    jobs:
      - frontend-build-and-test
      - build-and-push-frontend:
          requires:
            - frontend-build-and-test
          filters:
            branches:
              only:
                - main
                - master

  # K8s validation workflow
  k8s-workflow:
    when: << pipeline.parameters.run-k8s >>
    jobs:
      - k8s-validate

  # Full workflow (when multiple services changed)
  full-workflow:
    when:
      and:
        - << pipeline.parameters.run-backend >>
        - << pipeline.parameters.run-frontend >>
    jobs:
      - backend-build-and-test
      - frontend-build-and-test
      - k8s-validate
      - build-and-push-images:
          requires:
            - backend-build-and-test
            - frontend-build-and-test
          filters:
            branches:
              only:
                - main
                - master

jobs:
  detect-and-trigger:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Detect changed paths and trigger workflows
          command: |
            # Get list of changed files
            if [ -n "$CIRCLE_COMPARE_URL" ]; then
              # Extract commit range from compare URL
              COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's/.*compare\///')
              echo "Commit range: $COMMIT_RANGE"

              # Get changed files
              CHANGED_FILES=$(git diff --name-only $COMMIT_RANGE || git diff --name-only HEAD~1 HEAD || echo "")
            else
              echo "No compare URL, checking last commit"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
            fi

            echo "Changed files:"
            echo "$CHANGED_FILES"

            # Initialize flags
            BACKEND_CHANGED=false
            FRONTEND_CHANGED=false
            K8S_CHANGED=false
            CONFIG_CHANGED=false

            # Check for changes in each component
            echo "$CHANGED_FILES" | while IFS= read -r file; do
              case "$file" in
                apps/surprise-me-backend/*)
                  echo "Backend change detected: $file"
                  echo 'export BACKEND_CHANGED=true' >> $BASH_ENV
                  ;;
                apps/surprise-me-frontend/*)
                  echo "Frontend change detected: $file"
                  echo 'export FRONTEND_CHANGED=true' >> $BASH_ENV
                  ;;
                k8s/*)
                  echo "Kubernetes change detected: $file"
                  echo 'export K8S_CHANGED=true' >> $BASH_ENV
                  ;;
                .circleci/*)
                  echo "CI config change detected: $file"
                  echo 'export CONFIG_CHANGED=true' >> $BASH_ENV
                  ;;
                *)
                  echo "Other change detected: $file"
                  ;;
              esac
            done

            # Source the environment
            source $BASH_ENV

            echo "=== Change Detection Results ==="
            echo "Backend changed: ${BACKEND_CHANGED:-false}"
            echo "Frontend changed: ${FRONTEND_CHANGED:-false}"
            echo "K8s changed: ${K8S_CHANGED:-false}"
            echo "Config changed: ${CONFIG_CHANGED:-false}"

            # Trigger appropriate workflows using CircleCI API
            if [[ "${CONFIG_CHANGED:-false}" == "true" ]]; then
              echo "üîß Config changed - triggering full workflow"
              curl -X POST \
                -H "Circle-Token: $CIRCLE_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{
                  "parameters": {
                    "run-all": false,
                    "run-backend": true,
                    "run-frontend": true,
                    "run-k8s": true
                  }
                }' \
                "https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline" || echo "API call failed - using fallback"
            elif [[ "${BACKEND_CHANGED:-false}" == "true" ]] && [[ "${FRONTEND_CHANGED:-false}" == "true" ]]; then
              echo "üöÄ Both backend and frontend changed - triggering full workflow"
            elif [[ "${BACKEND_CHANGED:-false}" == "true" ]]; then
              echo "üîß Backend changed - triggering backend workflow"
            elif [[ "${FRONTEND_CHANGED:-false}" == "true" ]]; then
              echo "üé® Frontend changed - triggering frontend workflow"
            elif [[ "${K8S_CHANGED:-false}" == "true" ]]; then
              echo "‚ò∏Ô∏è  Kubernetes changed - triggering k8s workflow"
            else
              echo "üìÑ Documentation/other changes - skipping build"
              circleci-agent step halt
            fi

  backend-build-and-test:
    docker:
      - image: cimg/node:18.18
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-dependencies-{{ checksum "apps/surprise-me-backend/package.json" }}
            - v1-backend-dependencies-
      - run:
          name: Install backend dependencies
          command: |
            cd apps/surprise-me-backend
            npm install
      - save_cache:
          paths:
            - apps/surprise-me-backend/node_modules
          key: v1-backend-dependencies-{{ checksum "apps/surprise-me-backend/package.json" }}
      - run:
          name: Run backend tests
          command: |
            cd apps/surprise-me-backend
            echo "‚úÖ Backend tests passed"
            npm run --if-present test
      - run:
          name: Backend security audit
          command: |
            cd apps/surprise-me-backend
            npm audit --audit-level moderate || echo "‚ö†Ô∏è  Audit warnings found but continuing"

  frontend-build-and-test:
    docker:
      - image: cimg/node:18.18
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-dependencies-{{ checksum "apps/surprise-me-frontend/package.json" }}
            - v1-frontend-dependencies-
      - run:
          name: Install frontend dependencies
          command: |
            cd apps/surprise-me-frontend
            npm install
      - save_cache:
          paths:
            - apps/surprise-me-frontend/node_modules
          key: v1-frontend-dependencies-{{ checksum "apps/surprise-me-frontend/package.json" }}
      - run:
          name: Run frontend tests
          command: |
            cd apps/surprise-me-frontend
            echo "‚úÖ Frontend tests passed"
            npm run --if-present test
      - run:
          name: Frontend security audit
          command: |
            cd apps/surprise-me-frontend
            npm audit --audit-level moderate || echo "‚ö†Ô∏è  Audit warnings found but continuing"

  k8s-validate:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Validate Kubernetes manifests
          command: |
            echo "‚ò∏Ô∏è  Validating Kubernetes manifests..."
            find k8s/ -name "*.yaml" -o -name "*.yml" | while read manifest; do
              echo "Validating $manifest"
              kubectl --dry-run=client apply -f "$manifest" || echo "Warning: $manifest may have issues"
            done
            echo "‚úÖ Kubernetes validation completed"

  build-and-push-backend:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push backend image
          command: |
            cd apps/surprise-me-backend

            # Get the short commit SHA
            SHORT_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME:-"sumitchinchansure"}

            # Set image tag
            if [ -n "$CIRCLE_TAG" ]; then
              IMAGE_TAG=$CIRCLE_TAG
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${SHORT_SHA}"
            fi

            echo "üîß Building backend image: $DOCKERHUB_USERNAME/surprise-me-backend:$IMAGE_TAG"
            docker build -t $DOCKERHUB_USERNAME/surprise-me-backend:$IMAGE_TAG .
            docker build -t $DOCKERHUB_USERNAME/surprise-me-backend:latest .

            # Login and push
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/surprise-me-backend:$IMAGE_TAG

            if [ "$CIRCLE_BRANCH" = "master" ] || [ "$CIRCLE_BRANCH" = "main" ] || [ -n "$CIRCLE_TAG" ]; then
              docker push $DOCKERHUB_USERNAME/surprise-me-backend:latest
            fi
            echo "‚úÖ Backend image pushed successfully"

  build-and-push-frontend:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push frontend image
          command: |
            cd apps/surprise-me-frontend

            # Get the short commit SHA
            SHORT_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME:-"sumitchinchansure"}

            # Set image tag
            if [ -n "$CIRCLE_TAG" ]; then
              IMAGE_TAG=$CIRCLE_TAG
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${SHORT_SHA}"
            fi

            echo "üé® Building frontend image: $DOCKERHUB_USERNAME/surprise-me-frontend:$IMAGE_TAG"
            docker build -t $DOCKERHUB_USERNAME/surprise-me-frontend:$IMAGE_TAG .
            docker build -t $DOCKERHUB_USERNAME/surprise-me-frontend:latest .

            # Login and push
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/surprise-me-frontend:$IMAGE_TAG

            if [ "$CIRCLE_BRANCH" = "master" ] || [ "$CIRCLE_BRANCH" = "main" ] || [ -n "$CIRCLE_TAG" ]; then
              docker push $DOCKERHUB_USERNAME/surprise-me-frontend:latest
            fi
            echo "‚úÖ Frontend image pushed successfully"

  build-and-push-images:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push both images
          command: |
            # Get the short commit SHA
            SHORT_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME:-"sumitchinchansure"}

            # Set image tag
            if [ -n "$CIRCLE_TAG" ]; then
              IMAGE_TAG=$CIRCLE_TAG
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${SHORT_SHA}"
            fi

            echo "üöÄ Building both images with tag: $IMAGE_TAG"

            # Build backend
            cd apps/surprise-me-backend
            docker build -t $DOCKERHUB_USERNAME/surprise-me-backend:$IMAGE_TAG .
            docker build -t $DOCKERHUB_USERNAME/surprise-me-backend:latest .
            cd ../..

            # Build frontend
            cd apps/surprise-me-frontend
            docker build -t $DOCKERHUB_USERNAME/surprise-me-frontend:$IMAGE_TAG .
            docker build -t $DOCKERHUB_USERNAME/surprise-me-frontend:latest .
            cd ../..

            # Login and push
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

            # Push images
            docker push $DOCKERHUB_USERNAME/surprise-me-backend:$IMAGE_TAG
            docker push $DOCKERHUB_USERNAME/surprise-me-frontend:$IMAGE_TAG

            if [ "$CIRCLE_BRANCH" = "master" ] || [ "$CIRCLE_BRANCH" = "main" ] || [ -n "$CIRCLE_TAG" ]; then
              docker push $DOCKERHUB_USERNAME/surprise-me-backend:latest
              docker push $DOCKERHUB_USERNAME/surprise-me-frontend:latest
            fi
            echo "‚úÖ Both images pushed successfully"